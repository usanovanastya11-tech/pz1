name: CI/CD Pipeline

on:
  push:
    branches: [main, development, release/**]
  pull_request:
    branches: [main]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi
        
    - name: Syntax check
      run: |
        python -m py_compile *.py
        python -m py_compile tests/*.py
        echo "Syntax check passed"
        
    - name: Run unit tests
      run: |
        python tests/test_units.py
        echo "Unit tests passed"
        
    - name: Run integration tests
      run: |
        python tests/test_integration.py
        echo "Integration tests passed"
        
    - name: Run all tests
      run: |
        python run_tests.py
        echo "All test suites passed"
  security-scan:
    runs-on: ubuntu-latest
    needs: unit-tests
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Basic security check
      run: |
        echo "Checking for common security issues..."
        if grep -r "password\|secret\|key" --include="*.py" . | grep -v "#" | grep -v "print"; then
          echo "Warning: Possible hardcoded secrets found"
          exit 1
        else
          echo "No obvious hardcoded secrets"
        fi
        echo "Security scan completed"
  documentation:
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')
    name: Documentation Generation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
      
    - name: Documentation validation
      run: |
        echo "Validating documentation..."
        
        # Check required documentation files
        required_files=("README.md" "CHANGELOG.md")
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✓ $file exists"
            lines=$(wc -l < "$file")
            if [ "$lines" -gt 10 ]; then
              echo "✓ $file has sufficient content ($lines lines)"
            else
              echo "⚠ $file might need more content (only $lines lines)"
            fi
          else
            echo "❌ $file is missing"
            exit 1
          fi
        done
        
        # Check for code documentation
        echo "Checking code documentation..."
        if grep -r 'def ' --include="*.py" . | grep -v "def __" | wc -l | grep -q [0-9]; then
          function_count=$(grep -r 'def ' --include="*.py" . | grep -v "def __" | wc -l)
          echo "✓ Found $function_count functions in code"
        fi
        
    - name: Generate automated documentation
      run: |
        echo "Generating automated documentation..."
        
        # Create comprehensive documentation report
        cat > AUTO_GENERATED_DOCS.md << 'DOCS'
        # Automated Documentation Report
        
        ## Project Overview
        - **Project Name**: CI/CD Demo Project
        - **Repository**: https://github.com/usanovanastya11-tech/pz1
        - **CI/CD Status**: Active
        - **Last Generated**: $(date)
        
        ## Code Statistics
        - **Python Files**: $(find . -name "*.py" | wc -l)
        - **Test Files**: $(find tests -name "*.py" | wc -l)
        - **Documentation Files**: $(find . -name "*.md" | wc -l)
        
        ## File Structure
        \`\`\`
        $(find . -name "*.py" -o -name "*.md" | sort | head -20)
        \`\`\`
        
        ## Test Coverage
        - **Unit Tests**: Implemented
        - **Integration Tests**: Implemented  
        - **Automated Testing**: Enabled via GitHub Actions
        
        ## CI/CD Pipeline Status
        This documentation was automatically generated as part of the CI/CD pipeline.
        All tests must pass before documentation is updated.
        
        DOCS
        
        echo "✓ Automated documentation generated"
        
    - name: Create documentation archive
      run: |
        echo "Creating documentation archive..."
        mkdir -p documentation_build
        cp README.md documentation_build/
        cp CHANGELOG.md documentation_build/
        cp CONTRIBUTING.md documentation_build/
        cp AUTO_GENERATED_DOCS.md documentation_build/
        cp requirements.txt documentation_build/
        
        # Create file listing
        find . -name "*.py" -o -name "*.md" | sort > documentation_build/file_index.txt
        
        echo "✓ Documentation archive prepared"
        
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation-package
        path: |
          documentation_build/
          AUTO_GENERATED_DOCS.md
        retention-days: 30

  deployment-check:
    runs-on: ubuntu-latest
    needs: [unit-tests, security-scan, documentation]
    if: github.ref == 'refs/heads/main'
    name: Deployment Readiness
    
    steps:
    - name: Check deployment readiness
      run: |
        echo "Checking deployment readiness..."
        echo "✓ All tests passed"
        echo "✓ Security scan completed"
        echo "✓ Documentation generated"
        echo "✓ Project is ready for deployment"
        echo ""
        echo "Deployment Checklist:"
        echo "- [x] Code tested and verified"
        echo "- [x] Security checks passed"
        echo "- [x] Documentation updated"
        echo "- [x] Version information present"
